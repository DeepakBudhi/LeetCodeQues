/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {

  public:
    ListNode *detectCycle(ListNode *head) {
        if(head==NULL || head->next == NULL){
            return NULL;
        }
        else if(head->next == head){
            return head;
        }
        int temp = 1;
        ListNode* slow = head;
        ListNode* fast = head;
        do{
            slow = slow->next;
            if(fast == NULL || fast->next == NULL){
                temp  = 0;
                break;
            }
            fast = fast->next->next;
        }while(fast != slow);
        if(temp == 0){
            return NULL;
        }
        fast = head;
        while(fast != slow){
            slow = slow->next;
            fast = fast->next;
        }
        return slow;
    }
};
